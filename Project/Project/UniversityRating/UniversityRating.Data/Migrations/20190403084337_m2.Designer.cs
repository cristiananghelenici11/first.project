// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversityRating.Data.Context;

namespace UniversityRating.Data.Migrations
{
    [DbContext(typeof(UniversityRatingContext))]
    [Migration("20190403084337_m2")]
    partial class m2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Comment");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Credits");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<long>("FacultyId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("YearOfStudy");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CourseTeacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId");

                    b.Property<long>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId", "CourseId")
                        .IsUnique()
                        .HasName("UK_CourseTeachers");

                    b.ToTable("CourseTeachers");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Faculty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<long>("UniverstityId");

                    b.HasKey("Id");

                    b.HasIndex("UniverstityId");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Mark", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<long>("UserId");

                    b.Property<float>("Value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Marks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Mark");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<long>("Idnp");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UK_TeachersEmail");

                    b.HasIndex("Idnp")
                        .IsUnique()
                        .HasName("UK_TeachersIdnp");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.University", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("Age");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.UniversityTeacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("TeacherId");

                    b.Property<long>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UniversityId", "TeacherId")
                        .IsUnique()
                        .HasName("UK_UniversityTeachers");

                    b.ToTable("UniversityTeachers");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("FirstName")
                        .HasMaxLength(64);

                    b.Property<long>("Idnp");

                    b.Property<string>("LastName")
                        .HasMaxLength(64);

                    b.Property<string>("Password")
                        .HasMaxLength(64);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("UserName")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UK_UserEmail");

                    b.HasIndex("Idnp")
                        .IsUnique()
                        .HasName("UK_UserIdnp");

                    b.HasIndex("Password")
                        .IsUnique()
                        .HasName("UK_UserPassword")
                        .HasFilter("[Password] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentCourse", b =>
                {
                    b.HasBaseType("UniversityRating.Data.Core.DomainModels.Comment");

                    b.Property<long?>("CourseId");

                    b.HasIndex("CourseId");

                    b.HasDiscriminator().HasValue("CommentCourse");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentCourseTeacher", b =>
                {
                    b.HasBaseType("UniversityRating.Data.Core.DomainModels.Comment");

                    b.Property<long?>("CourseTeacherId");

                    b.HasIndex("CourseTeacherId");

                    b.HasDiscriminator().HasValue("CommentCourseTeacher");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentTeacher", b =>
                {
                    b.HasBaseType("UniversityRating.Data.Core.DomainModels.Comment");

                    b.Property<long?>("TeacherId");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("CommentTeacher");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentUniversity", b =>
                {
                    b.HasBaseType("UniversityRating.Data.Core.DomainModels.Comment");

                    b.Property<long?>("UniversityId");

                    b.HasIndex("UniversityId");

                    b.HasDiscriminator().HasValue("CommentUniversity");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.MarkCourse", b =>
                {
                    b.HasBaseType("UniversityRating.Data.Core.DomainModels.Mark");

                    b.Property<long?>("CourseId");

                    b.HasIndex("CourseId");

                    b.HasDiscriminator().HasValue("MarkCourse");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.MarkCourseTeacher", b =>
                {
                    b.HasBaseType("UniversityRating.Data.Core.DomainModels.Mark");

                    b.Property<long?>("CourseTeacherId");

                    b.HasIndex("CourseTeacherId");

                    b.HasDiscriminator().HasValue("MarkCourseTeacher");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.MarkTeacher", b =>
                {
                    b.HasBaseType("UniversityRating.Data.Core.DomainModels.Mark");

                    b.Property<long?>("TeacherId");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("MarkTeacher");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Comment", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserToComment")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Course", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Faculty", "Faculty")
                        .WithMany("Courses")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK_CourseToFaculty")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CourseTeacher", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Course", "Course")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CPToCourses")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UniversityRating.Data.Core.DomainModels.Teacher", "Teacher")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_CPToTeachers")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Faculty", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.University", "Universtity")
                        .WithMany("Faculties")
                        .HasForeignKey("UniverstityId")
                        .HasConstraintName("FK_FacultyToUniversity")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Mark", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.User", "User")
                        .WithMany("Marks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserToMark")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.UniversityTeacher", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Teacher", "Teacher")
                        .WithMany("UniversityTeachers")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_UPToTeachers")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("UniversityRating.Data.Core.DomainModels.University", "University")
                        .WithMany("UniversityTeachers")
                        .HasForeignKey("UniversityId")
                        .HasConstraintName("FK_UPToUniversities")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentCourse", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Course", "Course")
                        .WithMany("CommentCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CommentCourseToCourse")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentCourseTeacher", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.CourseTeacher", "CourseTeacher")
                        .WithMany("CommentCourseTeachers")
                        .HasForeignKey("CourseTeacherId")
                        .HasConstraintName("FK_CommentCourseTeacherToCourseTeacher")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentTeacher", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Teacher", "Teacher")
                        .WithMany("CommentTeachers")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_CommentTeacherToTeacher")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentUniversity", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.University", "University")
                        .WithMany("CommentUniversities")
                        .HasForeignKey("UniversityId")
                        .HasConstraintName("FK_CommentUniversitiesToUniversity")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.MarkCourse", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Course", "Course")
                        .WithMany("MarkCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_MarkCourseToCourse")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.MarkCourseTeacher", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.CourseTeacher", "CourseTeacher")
                        .WithMany("MarkCourseTeachers")
                        .HasForeignKey("CourseTeacherId")
                        .HasConstraintName("FK_MarkCourseTeacherToCourseTeacher")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.MarkTeacher", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Teacher", "Teacher")
                        .WithMany("MarkTeachers")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_MarkTeacherToTeacher")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversityRating.Data.Context;

namespace UniversityRating.Data.Migrations
{
    [DbContext(typeof(UniversityRatingContext))]
    partial class UniversityRatingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<long>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Comment");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Credits");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<long>("FacultyId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int>("YearOfStudy");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CourseTeacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId");

                    b.Property<long>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId", "CourseId")
                        .IsUnique()
                        .HasName("UK_CourseTeachers");

                    b.ToTable("CourseTeachers");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Faculty", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<long>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Identity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Mark", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<long>("UserId");

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Marks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Mark");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<long>("Idnp");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<long>("Phone");

                    b.Property<string>("TypeTeacher");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("UK_TeachersEmail");

                    b.HasIndex("Idnp")
                        .HasName("UK_TeachersIdnp");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.University", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("Age");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.UniversityTeacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("TeacherId");

                    b.Property<long>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UniversityId", "TeacherId")
                        .IsUnique()
                        .HasName("UK_UniversityTeachers");

                    b.ToTable("UniversityTeachers");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentCourse", b =>
                {
                    b.HasBaseType("UniversityRating.Data.Core.DomainModels.Comment");

                    b.Property<long>("CourseId");

                    b.HasIndex("CourseId");

                    b.HasDiscriminator().HasValue("CommentCourse");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentCourseTeacher", b =>
                {
                    b.HasBaseType("UniversityRating.Data.Core.DomainModels.Comment");

                    b.Property<long?>("CourseTeacherId");

                    b.HasIndex("CourseTeacherId");

                    b.HasDiscriminator().HasValue("CommentCourseTeacher");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentTeacher", b =>
                {
                    b.HasBaseType("UniversityRating.Data.Core.DomainModels.Comment");

                    b.Property<long>("TeacherId");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("CommentTeacher");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentUniversity", b =>
                {
                    b.HasBaseType("UniversityRating.Data.Core.DomainModels.Comment");

                    b.Property<long>("UniversityId");

                    b.HasIndex("UniversityId");

                    b.HasDiscriminator().HasValue("CommentUniversity");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.MarkCourse", b =>
                {
                    b.HasBaseType("UniversityRating.Data.Core.DomainModels.Mark");

                    b.Property<long>("CourseId");

                    b.HasIndex("CourseId");

                    b.HasDiscriminator().HasValue("MarkCourse");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.MarkCourseTeacher", b =>
                {
                    b.HasBaseType("UniversityRating.Data.Core.DomainModels.Mark");

                    b.Property<long>("CourseTeacherId");

                    b.HasIndex("CourseTeacherId");

                    b.HasDiscriminator().HasValue("MarkCourseTeacher");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.MarkTeacher", b =>
                {
                    b.HasBaseType("UniversityRating.Data.Core.DomainModels.Mark");

                    b.Property<long?>("TeacherId");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("MarkTeacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Identity.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Identity.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UniversityRating.Data.Core.DomainModels.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Comment", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Identity.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Course", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Faculty", "Faculty")
                        .WithMany("Courses")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK_CourseToFaculty");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CourseTeacher", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Course", "Course")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CPToCourses")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("UniversityRating.Data.Core.DomainModels.Teacher", "Teacher")
                        .WithMany("CourseTeachers")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_CPToTeachers")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Faculty", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.University", "University")
                        .WithMany("Faculties")
                        .HasForeignKey("UniversityId")
                        .HasConstraintName("FK_FacultyToUniversity");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.Mark", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Identity.User", "User")
                        .WithMany("Marks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.UniversityTeacher", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Teacher", "Teacher")
                        .WithMany("UniversityTeachers")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_UPToTeachers");

                    b.HasOne("UniversityRating.Data.Core.DomainModels.University", "University")
                        .WithMany("UniversityTeachers")
                        .HasForeignKey("UniversityId")
                        .HasConstraintName("FK_UPToUniversities");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentCourse", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Course", "Course")
                        .WithMany("CommentCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CommentCourseToCourse")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentCourseTeacher", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.CourseTeacher", "CourseTeacher")
                        .WithMany("CommentCourseTeachers")
                        .HasForeignKey("CourseTeacherId")
                        .HasConstraintName("FK_CommentCourseTeacherToCourseTeacher");
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentTeacher", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Teacher", "Teacher")
                        .WithMany("CommentTeachers")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_CommentTeacherToTeacher")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.CommentUniversity", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.University", "University")
                        .WithMany("CommentUniversities")
                        .HasForeignKey("UniversityId")
                        .HasConstraintName("FK_CommentUniversitiesToUniversity")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.MarkCourse", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Course", "Course")
                        .WithMany("MarkCourses")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_MarkCourseToCourse")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.MarkCourseTeacher", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.CourseTeacher", "CourseTeacher")
                        .WithMany("MarkCourseTeachers")
                        .HasForeignKey("CourseTeacherId")
                        .HasConstraintName("FK_MarkCourseTeacherToCourseTeacher")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("UniversityRating.Data.Core.DomainModels.MarkTeacher", b =>
                {
                    b.HasOne("UniversityRating.Data.Core.DomainModels.Teacher", "Teacher")
                        .WithMany("MarkTeachers")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_MarkTeacherToTeacher");
                });
#pragma warning restore 612, 618
        }
    }
}

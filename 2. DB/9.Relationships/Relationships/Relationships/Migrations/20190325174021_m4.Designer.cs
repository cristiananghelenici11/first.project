// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Relationships.DAL.Context;

namespace Relationships.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190325174021_m4")]
    partial class m4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Relationships.DAL.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<long>("StudentId");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Relationships.DAL.Models.Mark", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<double>("Value");

                    b.HasKey("Id");

                    b.ToTable("Marks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Mark");
                });

            modelBuilder.Entity("Relationships.DAL.Models.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<long>("Idnp")
                        .HasColumnName("Idnp")
                        .HasMaxLength(13);

                    b.Property<string>("LastName");

                    b.Property<int>("Phone");

                    b.Property<long>("UniversityId");

                    b.HasKey("Id");

                    b.HasIndex("UniversityId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Relationships.DAL.Models.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<long>("Idnp");

                    b.Property<string>("LastName");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Relationships.DAL.Models.University", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<int>("Age")
                        .HasMaxLength(3);

                    b.Property<string>("Contact");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            Id = 4L,
                            Address = "Studentilor",
                            Age = 30,
                            Contact = "245322",
                            Description = "utm-----",
                            Name = "UTM"
                        },
                        new
                        {
                            Id = 5L,
                            Address = "Studentilor",
                            Age = 30,
                            Contact = "245322",
                            Description = "utm-----",
                            Name = "UTM"
                        });
                });

            modelBuilder.Entity("Relationships.DAL.Models.UniversityTeacher", b =>
                {
                    b.Property<long>("TeacherId");

                    b.Property<long>("UniversityId");

                    b.Property<long>("Id");

                    b.HasKey("TeacherId", "UniversityId");

                    b.HasIndex("UniversityId");

                    b.ToTable("UniversityTeachers");
                });

            modelBuilder.Entity("Relationships.DAL.Models.MarkCourse", b =>
                {
                    b.HasBaseType("Relationships.DAL.Models.Mark");

                    b.Property<long?>("CourseId");

                    b.HasDiscriminator().HasValue("MarkCourse");
                });

            modelBuilder.Entity("Relationships.DAL.Models.MarkCourseTeacher", b =>
                {
                    b.HasBaseType("Relationships.DAL.Models.Mark");

                    b.Property<long?>("CourseId")
                        .HasColumnName("MarkCourseTeacher_CourseId");

                    b.Property<long?>("TeacherId");

                    b.HasDiscriminator().HasValue("MarkCourseTeacher");
                });

            modelBuilder.Entity("Relationships.DAL.Models.MarkTeacher", b =>
                {
                    b.HasBaseType("Relationships.DAL.Models.Mark");

                    b.Property<long?>("TeacherId")
                        .HasColumnName("MarkTeacher_TeacherId");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("MarkTeacher");
                });

            modelBuilder.Entity("Relationships.DAL.Models.Address", b =>
                {
                    b.HasOne("Relationships.DAL.Models.Student", "Student")
                        .WithOne("Address")
                        .HasForeignKey("Relationships.DAL.Models.Address", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Relationships.DAL.Models.Student", b =>
                {
                    b.HasOne("Relationships.DAL.Models.University", "University")
                        .WithMany("Students")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Relationships.DAL.Models.UniversityTeacher", b =>
                {
                    b.HasOne("Relationships.DAL.Models.Teacher", "Teacher")
                        .WithMany("UniversityTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Relationships.DAL.Models.University", "University")
                        .WithMany("UniversityTeachers")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Relationships.DAL.Models.MarkTeacher", b =>
                {
                    b.HasOne("Relationships.DAL.Models.Teacher", "Teacher")
                        .WithMany("MarkTeachers")
                        .HasForeignKey("TeacherId");
                });
#pragma warning restore 612, 618
        }
    }
}
